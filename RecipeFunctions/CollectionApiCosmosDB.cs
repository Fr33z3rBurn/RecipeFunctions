using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using RecipeFunctions.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.Documents.Client;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Microsoft.Azure.Documents;

namespace RecipeFunctions
{
    public static class CollectionApiCosmosDB
    {
        private const string Route = "Collection";
        private const string DatabaseName = "Recipe";
        private const string CollectionName = "Collection";

        [FunctionName("CreateCollection")]
        public static async Task<IActionResult> CreateCollection(
            [HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = Route)] HttpRequest req,
            [CosmosDB(
                DatabaseName,
                CollectionName,
                ConnectionStringSetting = "CosmosDBConnection")]
            IAsyncCollector<object> collections, ILogger log)
        {
            log.LogInformation("Creating a new Collection");
            var requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            var input = JsonConvert.DeserializeObject<Collection>(requestBody);

            //TODO Mapper
            var collection = new Collection() 
            {
                CollectionName = input.CollectionName, 
            };
            //the object we need to add has to have a lower case id property or we'll
            // end up with a cosmosdb document with two properties - id (autogenerated) and Id
            await collections.AddAsync(new { id = collection.Id,
                CollectionName = collection.CollectionName
            });
            return new OkObjectResult(collection);
        }

        [FunctionName("GetCollections")]
        public static IActionResult GetCollectionss(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = Route)] HttpRequest req,
            [CosmosDB(
                DatabaseName,
                CollectionName,
                ConnectionStringSetting = "CosmosDBConnection",
                SqlQuery = "SELECT * FROM c order by c._ts desc")]
                IEnumerable<Collection> collections,
            ILogger log)
        {
            log.LogInformation("Getting collection list items");
            return new OkObjectResult(collections);
        }

        [FunctionName("GetCollectionById")]
        public static IActionResult GetCollectionById(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = Route + "/{id}")] HttpRequest req,
            [CosmosDB(ConnectionStringSetting = "CosmosDBConnection")] DocumentClient client,
            ILogger log, string id)
        {
            var option = new FeedOptions { EnableCrossPartitionQuery = true };
            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName);
            var document = client.CreateDocumentQuery(collectionUri, option).Where(t => t.Id == id)
                    .AsEnumerable().FirstOrDefault();
            if (document == null)
            {
                return new NotFoundResult();
            }
            return new OkObjectResult(document);
        }

        [FunctionName("GetCollectionByName")]
        public static IActionResult GetCollectionByName(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = Route + "/name/{name}")] HttpRequest req,
            [CosmosDB(ConnectionStringSetting = "CosmosDBConnection")] DocumentClient client,
            ILogger log, string name)
        {
            var option = new FeedOptions { EnableCrossPartitionQuery = true };
            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName);
            var document = client.CreateDocumentQuery<Collection>(collectionUri, option).Where(t => t.CollectionName.ToLower() == name.ToLower())
                    .AsEnumerable().FirstOrDefault();
            if (document == null)
            {
                return new NotFoundResult();
            }
            return new OkObjectResult(document);
        }

        [FunctionName("SearchCollectionsByName")]
        public static IActionResult SearchCollectionsByName(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = Route + "/search/{name}")] HttpRequest req,
            [CosmosDB(ConnectionStringSetting = "CosmosDBConnection")] DocumentClient client,
            ILogger log, string name)
        {
            var option = new FeedOptions { EnableCrossPartitionQuery = true };
            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName);
            var document = client.CreateDocumentQuery<Collection>(collectionUri, option).Where(t => t.CollectionName.ToLower().Contains(name.ToLower()))
                    .AsEnumerable();
            if (document == null)
            {
                return new NotFoundResult();
            }
            return new OkObjectResult(document);
        }

        [FunctionName("UpdateCollection")]
        public static async Task<IActionResult> UpdateCollection(
            [HttpTrigger(AuthorizationLevel.Anonymous, "put", Route = Route + "/{id}")] HttpRequest req,
            [CosmosDB(ConnectionStringSetting = "CosmosDBConnection")]
                DocumentClient client,
            ILogger log, string id)
        {
            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            var updated = JsonConvert.DeserializeObject<Collection>(requestBody);
            var option = new FeedOptions { EnableCrossPartitionQuery = true };
            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName);
            var document = client.CreateDocumentQuery(collectionUri, option).Where(t => t.Id == id)
                            .AsEnumerable().FirstOrDefault();
            if (document == null)
            {
                return new NotFoundResult();
            }

			document.SetPropertyValue("CollectionName", updated.CollectionName);

			await client.ReplaceDocumentAsync(document);

            Collection collection = (dynamic)document;

            return new OkObjectResult(collection);
        }

        [FunctionName("DeleteCollection")]
        public static async Task<IActionResult> DeleteCollection(
            [HttpTrigger(AuthorizationLevel.Anonymous, "delete", Route = Route + "/{id}")] HttpRequest req,
            [CosmosDB(ConnectionStringSetting = "CosmosDBConnection")] DocumentClient client,
            ILogger log, string id)
        {
            ResourceResponse<Document> response = await client.DeleteDocumentAsync(
                UriFactory.CreateDocumentUri(DatabaseName, CollectionName, id),
                new RequestOptions { PartitionKey = new PartitionKey(Undefined.Value) });

            //TODO Make Conditional
            return new NoContentResult();
        }
    }
}

