using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using RecipeFunctions.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.Documents.Client;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Microsoft.Azure.Documents;

namespace RecipeFunctions
{
    public static class RecipeApiCosmosDB
    {
        private const string Route = "Recipe";
        private const string DatabaseName = "Recipe";
        private const string CollectionName = "Recipe";

        [FunctionName("CreateRecipe")]
        public static async Task<IActionResult> CreateRecipe(
            [HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = Route)] HttpRequest req,
            [CosmosDB(
                DatabaseName,
                CollectionName,
                ConnectionStringSetting = "CosmosDBConnection")]
            IAsyncCollector<object> recipes, ILogger log)
        {
            log.LogInformation("Creating a new Recipe");
            var requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            var input = JsonConvert.DeserializeObject<Recipe>(requestBody);

            //TODO Mapper
            var recipe = new Recipe() 
            {
                CollectionId = input.CollectionId,
                RecipeName = input.RecipeName, 
                RecipeNationality = input.RecipeNationality,
                Ingredients = input.Ingredients, 
                Steps = input.Steps, 
                PrepTimeMinutes = input.PrepTimeMinutes,
                CookTimeMinutes = input.CookTimeMinutes,
                ReadyInMinutes = input.ReadyInMinutes,
                Creator = input.Creator,
                Notes = input.Notes
            };
            //the object we need to add has to have a lower case id property or we'll
            // end up with a cosmosdb document with two properties - id (autogenerated) and Id
            await recipes.AddAsync(new { id = recipe.Id,
                CollectionId = recipe.CollectionId,
                RecipeName = recipe.RecipeName,
                RecipeNationality = recipe.RecipeNationality,
                Ingredients = recipe.Ingredients,
                Steps = recipe.Steps,
                PrepTimeMinutes = recipe.PrepTimeMinutes,
                CookTimeMinutes = recipe.CookTimeMinutes,
                ReadyInMinutes = recipe.ReadyInMinutes,
                Creator = recipe.Creator,
                Notes = recipe.Notes
            });
            return new OkObjectResult(recipe);
        }

        [FunctionName("GetRecipes")]
        public static IActionResult GetRecipes(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = Route)] HttpRequest req,
            [CosmosDB(
                DatabaseName,
                CollectionName,
                ConnectionStringSetting = "CosmosDBConnection",
                SqlQuery = "SELECT * FROM c order by c._ts desc")]
                IEnumerable<Recipe> recipes,
            ILogger log)
        {
            log.LogInformation("Getting recipe list items");
            return new OkObjectResult(recipes);
        }

        [FunctionName("GetRecipeById")]
        public static IActionResult GetRecipeById(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = Route + "/{id}")] HttpRequest req,
            [CosmosDB(ConnectionStringSetting = "CosmosDBConnection")] DocumentClient client,
            ILogger log, string id)
        {
            var option = new FeedOptions { EnableCrossPartitionQuery = true };
            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName);
            var document = client.CreateDocumentQuery(collectionUri, option).Where(t => t.Id == id)
                    .AsEnumerable().FirstOrDefault();
            if (document == null)
            {
                return new NotFoundResult();
            }
            return new OkObjectResult(document);
        }

        [FunctionName("GetRecipeByName")]
        public static IActionResult GetRecipeByName(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = Route + "/name/{name}")] HttpRequest req,
            [CosmosDB(ConnectionStringSetting = "CosmosDBConnection")] DocumentClient client,
            ILogger log, string name)
        {
            var option = new FeedOptions { EnableCrossPartitionQuery = true };
            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName);
            var document = client.CreateDocumentQuery<Recipe>(collectionUri, option).Where(t => t.RecipeName.ToLower() == name.ToLower())
                    .AsEnumerable().FirstOrDefault();
            if (document == null)
            {
                return new NotFoundResult();
            }
            return new OkObjectResult(document);
        }

        [FunctionName("SearchRecipesByName")]
        public static IActionResult SearchRecipesByName(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = Route + "/search/{name}")] HttpRequest req,
            [CosmosDB(ConnectionStringSetting = "CosmosDBConnection")] DocumentClient client,
            ILogger log, string name)
        {
            var option = new FeedOptions { EnableCrossPartitionQuery = true };
            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName);
            var document = client.CreateDocumentQuery<Recipe>(collectionUri, option).Where(t => t.RecipeName.ToLower().Contains(name.ToLower()))
                    .AsEnumerable();
            if (document == null)
            {
                return new NotFoundResult();
            }
            return new OkObjectResult(document);
        }

        [FunctionName("UpdateRecipe")]
        public static async Task<IActionResult> UpdateRecipe(
            [HttpTrigger(AuthorizationLevel.Anonymous, "put", Route = Route + "/{id}")] HttpRequest req,
            [CosmosDB(ConnectionStringSetting = "CosmosDBConnection")]
                DocumentClient client,
            ILogger log, string id)
        {
            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            var updated = JsonConvert.DeserializeObject<Recipe>(requestBody);
            var option = new FeedOptions { EnableCrossPartitionQuery = true };
            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName);
            var document = client.CreateDocumentQuery(collectionUri, option).Where(t => t.Id == id)
                            .AsEnumerable().FirstOrDefault();
            if (document == null)
            {
                return new NotFoundResult();
            }

			//TODO Update
			document.SetPropertyValue("RecipeName", updated.RecipeName);
			if (!string.IsNullOrEmpty(updated.Creator))
			{
				document.SetPropertyValue("Creator", updated.Creator);
			}

			await client.ReplaceDocumentAsync(document);

            Recipe recipe = (dynamic)document;

            return new OkObjectResult(recipe);
        }

        [FunctionName("DeleteRecipe")]
        public static async Task<IActionResult> DeleteRecipe(
            [HttpTrigger(AuthorizationLevel.Anonymous, "delete", Route = Route + "/{id}")] HttpRequest req,
            [CosmosDB(ConnectionStringSetting = "CosmosDBConnection")] DocumentClient client,
            ILogger log, string id)
        {
            ResourceResponse<Document> response = await client.DeleteDocumentAsync(
                UriFactory.CreateDocumentUri(DatabaseName, CollectionName, id),
                new RequestOptions { PartitionKey = new PartitionKey(Undefined.Value) });
            
            //TODO Make Conditional
            return new NoContentResult();
        }

        [FunctionName("GetRandomRecipe")]
        public static IActionResult GetRandomRecipe(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = Route + "/random")] HttpRequest req,
            [CosmosDB(
                DatabaseName,
                CollectionName,
                ConnectionStringSetting = "CosmosDBConnection",
                SqlQuery = "SELECT * FROM c order by c._ts desc")]
                IEnumerable<Recipe> recipes,
            ILogger log)
        {
            log.LogInformation("Getting recipe list items");
            
            if(recipes != null && recipes.Count() > 0)
			{
                Random random = new Random();
                int randomRecipeNumber = random.Next(0, recipes.Count() - 1);
                return new OkObjectResult(recipes.ToList()[randomRecipeNumber]);
			}
            return new NotFoundResult();
            
        }
    }
}

