using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using RecipeFunctions.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.Documents.Client;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Microsoft.Azure.Documents;
using System.Security.Cryptography;
using System.IdentityModel.Tokens.Jwt;
using System.Text;
using Microsoft.IdentityModel.Tokens;
using System.Security.Claims;

namespace RecipeFunctions
{
	public static class UserApiCosmosDB
	{
		private const string Route = "User";
		private const string DatabaseName = "Recipe";
		private const string CollectionName = "User";

		[FunctionName("RegisterUser")]
		public static async Task<IActionResult> CreateRecipe(
			[HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = Route)] HttpRequest req,
			[CosmosDB(
				DatabaseName,
				CollectionName,
				ConnectionStringSetting = "CosmosDBConnection")]
			IAsyncCollector<object> users, ILogger log)
		{
			log.LogInformation("Register a User");
			var requestBody = await new StreamReader(req.Body).ReadToEndAsync();
			var input = JsonConvert.DeserializeObject<RegisterModel>(requestBody);

			//TODO Mapper
			var user = new RecipeUser()
			{
				FirstName = input.FirstName,
				LastName = input.LastName,
				Email = input.Email,
				Password = input.Password
			};

			byte[] passwordSalt;
			byte[] passwordHash;

			using (var hmac = new HMACSHA512())
			{
				passwordSalt = hmac.Key;
				passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(input.Password));
			}
			//the object we need to add has to have a lower case id property or we'll
			// end up with a cosmosdb document with two properties - id (autogenerated) and Id
			await users.AddAsync(new
			{
				FirstName = input.FirstName,
				LastName = input.LastName,
				Email = input.Email,
				PasswordSalt = passwordSalt,
				PasswordHash = passwordHash
			});
			return new OkObjectResult(user);
		}

		[FunctionName("AuthenticateUser")]
		public static async Task<IActionResult> AuthenticateUser(
			[HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = Route + "/authenticate")] HttpRequest req,
			[CosmosDB(
				DatabaseName,
				CollectionName,
				ConnectionStringSetting = "CosmosDBConnection")] DocumentClient client, ILogger log)
		{
			log.LogInformation("Authenticate a User");
			var requestBody = await new StreamReader(req.Body).ReadToEndAsync();
			var input = JsonConvert.DeserializeObject<AuthenticateModel>(requestBody);

			//TODO Mapper
			var user = new AuthenticateModel()
			{
				Email = input.Email,
				Password = input.Password
			};

			//get user
			var option = new FeedOptions { EnableCrossPartitionQuery = true };
			Uri collectionUri = UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName);
			var recipeUser = client.CreateDocumentQuery<RecipeUser>(collectionUri, option).Where(t => t.Email == input.Email)
					.AsEnumerable().FirstOrDefault();

			bool passwordCorrect = true;

			using (var hmac = new HMACSHA512(recipeUser.PasswordSalt))
			{
				var computedHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(input.Password));
				for (int i = 0; i < computedHash.Length; i++)
				{
					if (computedHash[i] != recipeUser.PasswordHash[i])
					{
						passwordCorrect = false;
					}
				}
			}

			if (passwordCorrect)
			{
				var tokenHandler = new JwtSecurityTokenHandler();
				var key = Encoding.ASCII.GetBytes(Environment.GetEnvironmentVariable("Secret"));
				var tokenDescriptor = new SecurityTokenDescriptor
				{
					Subject = new ClaimsIdentity(new Claim[]
					{
					new Claim(ClaimTypes.Name, recipeUser.Id.ToString())
					}),
					Expires = DateTime.UtcNow.AddDays(7),
					SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
				};
				var token = tokenHandler.CreateToken(tokenDescriptor);
				var tokenString = tokenHandler.WriteToken(token);

				// return basic user info and authentication token
				return new OkObjectResult(new
				{
					Id = recipeUser.Id,
					Email = recipeUser.Email,
					FirstName = recipeUser.FirstName,
					LastName = recipeUser.LastName,
					Token = tokenString
				});
			}
			else
			{
				return new BadRequestResult();
			}
		}
	}
}

